#!/bin/bash
if [[ $EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "$0" "$@"
fi
argdata=/tmp/ima-update-temparg
ready_watcher=/tmp/ima-update-ready-to-deploy
source /etc/ima-release

endpoint=https://api.github.com/repos/immutarch/releases_${RELEASETYPE}/releases
downloadpath=/home/.ima/updatecontainer

IMGTYPE=".img.zst"
SIGTYPE="${IMGTYPE}.sha256"

get_img_details(){
    stdout=$(jq)
    stdout=$(echo "${stdout}" | jq 'del(.[] | select(.assets[].state != "uploaded"))')
    os_tag_name=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .tag_name')
    image_name=$(echo "${stdout}" | jq 'del(.[] | select(.assets[].state != "uploaded"))' | jq -er '[ .[] | select(.prerelease==false) ] | first | .name')
    download_img_id=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith("${IMGTYPE}")) | .url')
    download_sha_id=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith("${SIGTYPE}")) | .url')
    if [[ "${os_tag_name}" == "${OS_TAG}" ]]; then
        echo "System up to date."
    elif [[ "${os_tag_name}" > "${OS_TAG}" ]]; then
        echo -e "OS_TAG_NAME=$os_tag_name\nIMAGEFILE=$image_name\nGH_IMG_DL=$download_img_id\nGH_SHA_DL=$download_sha_id" > ${argdata}
        echo "Update available. OS Update: ${os_tag_name} (Image: ${image_name})"
    else
        echo -e "Your version (${OS_TAG}) is newer than currently available (${os_tag_name}).\nPlease wait for next update to appear available in branch \"${RELEASETYPE}\" for installation."
    fi
}

updatecheck(){
    curl --http1.1 -L -s "${endpoint}" | get_img_details
    if [[ -f "${argdata}" ]]; then
        exit 7
    else
        exit 1
    fi
}

verintg(){
    echo "Verifying update file integrity..."
    CURR_SHA=$(echo $(sha256sum ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE}) | awk '{print $1}')
    if [[ "${CURR_SHA}" == "$(cat ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${SIGTYPE})" ]]; then
        touch ${ready_watcher}
        echo "Update file download complete. The system is ready to update."
    else
        rm -rf ${downloadpath}/${IMAGEFILE}
        echo "Verification failed. Download contents erased."
        exit 1
    fi
}

dlupd(){
    source ${argdata}
    if [[ -f "${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE}" ]] && [[ -f "${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${SIGTYPE}" ]]; then
        verintg
    else
        mkdir -p ${downloadpath}/${IMAGEFILE}
        echo "Downloading update files..."
        curl --http1.1 -L -H "Accept: application/octet-stream" -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE} "${GH_IMG_DL}"
        curl --http1.1 -L -H "Accept: application/octet-stream" -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${SIGTYPE} "${GH_SHA_DL}"
        verintg
    fi
}

if [ -n "$1" ]; then
    case "$1" in
    "check")
        rm -f ${argdata} ${ready_watcher}
        updatecheck
        ;;
    "download-update")
        if [[ -f "${argdata}" ]]; then
            dlupd
        else
            echo "Update arguments are not yet available. Please try checking for updates first."
            exit 1
        fi
        ;;
    "apply-now")
        if [[ -f "${ready_watcher}" ]]; then
            ima-update-os ${argdata}
            exit 7
        fi
        if [[ -f "${argdata}" ]]; then
            dlupd
            if [[ -f "${ready_watcher}" ]]; then
                ima-update-os ${argdata}
                exit 7
            fi
        else
            echo -e "No update arguments set. Checking for updates...\n"
            updatecheck
            dlupd
            if [[ -f "${ready_watcher}" ]]; then
                ima-update-os ${argdata}
                exit 7
            fi
        fi
        ;;
    "-d")
        echo "No debug support check"
        updatecheck
        ;;
    "*")
        echo "Invalid option $1"
        exit 1
        ;;
    esac
    shift
else
    echo "No option passed."
    exit 255
fi
