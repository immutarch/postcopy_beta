#!/bin/bash

if [[ $EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "$0" "$@"
fi
argdata=/tmp/ima-update-temparg
ready_watcher=/tmp/ima-update-ready-to-deploy
source /etc/ima-release

if [[ -f "/tmp/patch.incremental_conditions" ]]; then
    source /tmp/patch.incremental_conditions
fi

rm -rf /tmp/update-log.txt

endpoint=https://api.github.com/repos/immutarch/releases_${RELEASETYPE}/releases
downloadpath=/home/.ima/updatecontainer

IMGTYPE=".img.zst"
SIGTYPE="${IMGTYPE}.sha256"

clean_progress() {
	local scale=$1
	local postfix=$2
	local last_value=$scale
	while IFS= read -r line; do
		value=$(( ${line}*${scale}/100 ))
		if [ "$last_value" != "$value" ]; then
            if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                echo "CPROGRESS=${value}"
            else
                echo ${value}${postfix}
            fi
			last_value=$value
		fi
	done
}

get_img_details(){
    stdout=$(jq)
    stdout=$(echo "${stdout}" | jq 'del(.[] | select(.assets[].state != "uploaded"))')
    os_tag_name=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .tag_name')
    image_name=$(echo "${stdout}" | jq 'del(.[] | select(.assets[].state != "uploaded"))' | jq -er '[ .[] | select(.prerelease==false) ] | first | .name')
    download_img_id=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith(".img.zst")) | .url')
    download_sha_id=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith(".img.zst.sha256")) | .url')
    incremental_conditions=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith(".incremental_conditions")) | .url')
    if [[ $incremental_conditions ]]; then
        incremental_index1=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith(".index1")) | .url')
        incremental_index2=$(echo "${stdout}" | jq -er '[ .[] | select(.prerelease==false) ] | first | .assets[] | select(.name | endswith(".index2")) | .url')
        curl --http1.1 -# -L -H "Accept: application/octet-stream" -o /tmp/patch.incremental_conditions  -C - "${incremental_conditions}" 2>&1 | stdbuf -oL tr '\r' '\n' | grep --line-buffered -oP '[0-9]*+(?=.[0-9])'
        source /tmp/patch.incremental_conditions
    fi

    # Conditions where system is up to date, or where container is installed should be checked before anything else
    if [[ "${os_tag_name}" == "${OS_TAG}" ]]; then
        echo "System up to date."
    elif [[ -d "/ima_root/rootfs/$image_name" ]]; then
        echo "System up to date."
    fi

    # Check if we have offering for incremental patch
    if [[ $INCREMENTAL_STORE ]]; then
        if [[ "${os_tag_name}" > "${OS_TAG}" ]]; then
            if [[ "${OS_TAG}" == "${INCREMENTAL_QUERY_INDEX1}" ]] && [[ -d "/home/.ima/updatecontainer/$IMAGE_ID" ]]; then
                echo -e "OS_TAG_NAME=$os_tag_name\nIMAGEFILE=$image_name\nGH_PATCH_DL=$incremental_index1\nAPPLY_PATCH=incremental_patch.index1\nAPPLYTO=$INCREMENTAL_APPLYTO_INDEX1\nDONTCLEANUP_PATCH=true" > ${argdata}
                echo "Update available as a patch. OS Update: ${os_tag_name} (Image: ${image_name})"
            elif [[ "${OS_TAG}" == "${INCREMENTAL_QUERY_INDEX2}" ]] && [[ -d "/home/.ima/updatecontainer/$IMAGE_ID" ]]; then
                echo -e "OS_TAG_NAME=$os_tag_name\nIMAGEFILE=$image_name\nGH_PATCH_DL=$incremental_index2\nAPPLY_PATCH=incremental_patch.index2\nAPPLYTO=$INCREMENTAL_APPLYTO_INDEX2\nDONTCLEANUP_PATCH=true" > ${argdata}
                echo "Update available as a patch. OS Update: ${os_tag_name} (Image: ${image_name})"
            else
                NOINCREMENTAL=true
            fi
        fi
    fi

    # Check if we have full builds if rest don't match up
    if [[ "${os_tag_name}" > "${OS_TAG}" ]]; then
        echo -e "OS_TAG_NAME=$os_tag_name\nIMAGEFILE=$image_name\nGH_IMG_DL=$download_img_id\nGH_SHA_DL=$download_sha_id" > ${argdata}
        echo "Update available. OS Update: ${os_tag_name} (Image: ${image_name})"
    else
        echo -e "Your version (${OS_TAG}) is newer than currently available (${os_tag_name}).\nPlease wait for next update to appear available in branch \"${RELEASETYPE}\" for installation."
    fi
}

updatecheck(){
    curl --http1.1 -L -s "${endpoint}" | get_img_details
    if [[ -f "${argdata}" ]]; then
        if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
            exit 70
        else
            exit 7
        fi
    else
        exit 1
    fi
}

verintg(){
    echo "Verifying update file integrity..."
    CURR_SHA=$(echo $(sha256sum ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE}) | awk '{print $1}')
    if [[ "${CURR_SHA}" == "$(cat ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${SIGTYPE})" ]]; then
        touch ${ready_watcher}
        echo "Update file download complete. The system is ready to update."
    else
        if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                rm -rf ${downloadpath}/${IMAGEFILE}
                echo "CMSG=Update failed. Unable to verify container integrity. Please try again."
                exit 50
        fi
        rm -rf ${downloadpath}/${IMAGEFILE}
        echo "Verification failed. Download contents erased."
        exit 1
    fi
}

dlupd(){
    source ${argdata}
    if [[ -f "${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE}" ]] && [[ -f "${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${SIGTYPE}" ]]; then
        verintg
    else
        mkdir -p ${downloadpath}/${IMAGEFILE}
        echo "Downloading update files..."
        if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
            echo "CMSG=Downloading OS image ($IMAGEFILE)..."
            curl --http1.1 -# -L -H "Accept: application/octet-stream" -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE}  -C - "${GH_IMG_DL}" 2>&1 | stdbuf -oL tr '\r' '\n' | grep --line-buffered -oP '[0-9]*+(?=.[0-9])' | clean_progress 100 %
            curl_exit_code=${PIPESTATUS[0]}
            if [[ "$curl_exit_code" != "0" ]]; then
                echo "CMSG=OS Image download abruptly cut"
                exit 50
            fi
        else
            curl --http1.1 -# -L -H "Accept: application/octet-stream" -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${IMGTYPE}  -C - "${GH_IMG_DL}" 2>&1 | stdbuf -oL tr '\r' '\n' | grep --line-buffered -oP '[0-9]*+(?=.[0-9])' | clean_progress 100 %
        fi
        if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
            echo "CMSG=Downloading SHA for this image..."
        fi
        curl --http1.1 -# -L -H "Accept: application/octet-stream" -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}${SIGTYPE} "${GH_SHA_DL}"
        curl_exit_code=${PIPESTATUS[0]}
            if [[ "$curl_exit_code" != "0" ]]; then
                if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                    echo "CMSG=OS Image SHASUM download abruptly cut"
                else
                    echo "Failed to download SHA."
                fi
                exit 50
            fi
        verintg
    fi
}

if [ -n "$1" ]; then

    if [[ "$2" == "--settingsapp" ]]; then
        WITH_SETTINGSAPP_EXPORTS=1
        ADDITIONAL_SETTINGS_EXPORT="--settingsapp"
    fi

    case "$1" in
    "check")
        rm -f ${argdata} ${ready_watcher}
        updatecheck
        ;;
    "download-update")
        if [[ -f "${argdata}" ]]; then
            dlupd
        else
            echo "Update arguments are not yet available. Please try checking for updates first."
            exit 1
        fi
        ;;
    "apply-now")
        if [[ -f "${ready_watcher}" ]]; then
            if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                echo "CMSG=Installing OS Image, please wait..."
            fi
            ima-update-os ${argdata} ${ADDITIONAL_SETTINGS_EXPORT}
            if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                echo "CMSG=Installation finished! Press the \"Reboot\" button below to finalize."
                exit 51
            fi
            exit 7
        fi
        if [[ -f "${argdata}" ]]; then
            dlupd
            if [[ -f "${ready_watcher}" ]]; then
                if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                    echo "CMSG=Installing OS Image, please wait..."
                fi
                ima-update-os ${argdata} ${ADDITIONAL_SETTINGS_EXPORT}
                if [[ $WITH_SETTINGSAPP_EXPORTS ]]; then
                    echo "CMSG=Installation finished! Press the \"Reboot\" button below to finalize."
                    exit 51
                fi
                exit 7
            fi
        else
            echo -e "No update arguments set. Checking for updates...\n"
            updatecheck
            dlupd
            if [[ -f "${ready_watcher}" ]]; then
                ima-update-os ${argdata} ${ADDITIONAL_SETTINGS_EXPORT}
                exit 7
            fi
        fi
        ;;
    "-d")
        echo "No debug support check"
        updatecheck
        ;;
    "*")
        echo "Invalid option $1"
        exit 1
        ;;
    esac
    shift
else
    echo "No option passed."
    exit 255
fi
